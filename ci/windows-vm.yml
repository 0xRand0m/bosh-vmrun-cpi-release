---
name: windows-vm

releases:
- name: bosh-vmrun-cpi
  url: ((cpi_url))
  sha1: ((cpi_sha1))
- name: windows-utilities
  version: 0.11.0
  url: https://bosh.io/d/github.com/cloudfoundry-incubator/windows-utilities-release?v=0.11.0
  sha1: efc10ac0f4acae23637ce2c6f864d20df2e3a781
- name: "windows-tools"
  version: "23"
  url: "https://bosh.io/d/github.com/cloudfoundry-incubator/windows-tools-release?v=23"
  sha1: "b4eb3bead6d80e2e36549384844771ce79a13f44"

resource_pools:
- name: vms
  network: default
  stemcell:
    url: ((stemcell_url))
    sha1: ((stemcell_sha1))
  cloud_properties:
    cpu: 2
    ram: 4_096
    bootstrap:
      script_content: |
        $ErrorActionPreference = "Stop";
        trap { $host.SetShouldExit(1) }

        Add-Content "Checking if running script as admin" -Path $PSScriptRoot\bootstrap-vm.log
        $IsAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
        if (! $IsAdmin) {
          Add-Content "Sleeping for an hour to allow user to manually run provision script as admin" -Path $PSScriptRoot\bootstrap-vm.log
          While (!(Test-Path $PSScriptRoot\bootstrap-vm.done -PathType Leaf)) {
            Add-Content "Waiting for done-file" -Path $PSScriptRoot\bootstrap-vm.log
            Start-Sleep 5
          }
          Add-Content "Found done-file" -Path $PSScriptRoot\bootstrap-vm.log
        } else {
          Add-Content "Continuing as admin" -Path $PSScriptRoot\bootstrap-vm.log

          Add-Content "Creating bosh-debug user" -Path $PSScriptRoot\bootstrap-vm.log
          [string]$Username = 'bosh-debug'
          [string]$NewPassword = 'Password123!'

          net user $Username $NewPassword /add
          net user $Username /active:yes
          net localgroup Administrators $Username /add
          Add-Content "Created user" -Path $PSScriptRoot\bootstrap-vm.log

          Add-Content "Creating modern bosh blobs directory" -Path $PSScriptRoot\bootstrap-vm.log
          mkdir "c:\var\vcap\data\blobs"
          Add-Content "Created modern bosh blobs directory" -Path $PSScriptRoot\bootstrap-vm.log

          Add-Content "Creating legacy bosh blobs directory" -Path $PSScriptRoot\bootstrap-vm.log
          mkdir "c:\var\vcap\micro_bosh\data\cache"
          Add-Content "Created legacy bosh blobs directory" -Path $PSScriptRoot\bootstrap-vm.log

          Add-Content "Opening bosh-agent firewall" -Path $PSScriptRoot\bootstrap-vm.log
          New-NetFirewallRule -DisplayName 'bosh-agent' -Program 'C:\bosh\bosh-agent.exe'
          Add-Content "Opened bosh-agent firewall" -Path $PSScriptRoot\bootstrap-vm.log

          Add-Content "Creating done-file to signal watching process" -Path $PSScriptRoot\bootstrap-vm.log
          New-Item -ItemType File $PSScriptRoot\bootstrap-vm.done
        }
      script_path: 'C:\provision\bootstrap-vm.ps1'
      interpreter_path: 'C:\WINDOWS\system32\WindowsPowerShell\v1.0\powershell.exe'
      ready_process_name: 'WmiApSrv.exe' #2012
      username: 'administrator'
      password: 'Password123!' #same as stemcell
      min_wait_seconds: 180
      max_wait_seconds: 300
  env:
    bosh:
      mbus:
        cert: ((mbus_bootstrap_ssl))

networks:
- name: default
  type: manual
  subnets:
  - range: ((internal_cidr))
    gateway: ((internal_gw))
    static: [((internal_ip))]
    dns: [8.8.8.8]
    cloud_properties:
      name: ((network_name))

instance_groups:
- name: windows-vm
  instances: 1
  jobs:
  - name: set_password
    release: windows-utilities
    properties:
      set_password:
        username: "Administrator"
        password: ((administrator_password))
  - name: diego-ssh
    release: windows-tools
    properties:
      diego_ssh:
        public_key: ((ssh_public_key))
  - {name: enable_rdp, release: windows-utilities}
  - {name: powershell-profile, release: windows-tools}
  - {name: bazel, release: windows-tools}
  - {name: bosh-cli-windows, release: windows-tools}
  - {name: cmake, release: windows-tools}
  - {name: git, release: windows-tools}
  - {name: golang-windows, release: windows-tools}
  - {name: make, release: windows-tools}
  - {name: mingw32, release: windows-tools}
  - {name: mingw64, release: windows-tools}
  - {name: msys2, release: windows-tools}
  - {name: ninja, release: windows-tools}
  - {name: packer, release: windows-tools}
  - {name: perl64, release: windows-tools}
  - {name: processhacker, release: windows-tools}
  - {name: ruby, release: windows-tools}
  - {name: vc_redist, release: windows-tools}
  - {name: vs_buildtools, release: windows-tools}
  - {name: docker, release: windows-tools}
  resource_pool: vms
  networks:
  - name: default
    static_ips: [((internal_ip))]
  properties:
    agent:
      env:
        bosh: {}
    ntp: &ntp
    - time1.google.com
    - time2.google.com
    - time3.google.com
    - time4.google.com
cloud_provider:
  mbus: https://mbus:((mbus_bootstrap_password))@((internal_ip)):6868
  cert: ((mbus_bootstrap_ssl))
  properties:
    blobstore:
      provider: local
      path: '/var/vcap/micro_bosh/data/cache' #depends on agents internal location
    agent: {mbus: "https://mbus:((mbus_bootstrap_password))@0.0.0.0:6868"}
    ntp: *ntp
    vmrun:
      vmrun_bin_path: "((vmrun_bin_path))"
      ovftool_bin_path: "((ovftool_bin_path))"
      vdiskmanager_bin_path: "((vdiskmanager_bin_path))"
      vm_store_path: "((vm_store_path))"
      vm_start_max_wait_seconds: 600
      vm_soft_shutdown_max_wait_seconds: 30
  template:
    name: vmrun_cpi
    release: bosh-vmrun-cpi

variables:
- name: mbus_bootstrap_password
  type: password

- name: default_ca
  type: certificate
  options:
    is_ca: true
    common_name: ca

- name: mbus_bootstrap_ssl
  type: certificate
  options:
    ca: default_ca
    common_name: ((internal_ip))
    alternative_names: [((internal_ip))]

