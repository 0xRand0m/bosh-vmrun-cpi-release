// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"bosh-govmomi-cpi/govc"
	"sync"
)

type FakeGovcClient struct {
	ImportOvfStub        func(string, string) (string, error)
	importOvfMutex       sync.RWMutex
	importOvfArgsForCall []struct {
		arg1 string
		arg2 string
	}
	importOvfReturns struct {
		result1 string
		result2 error
	}
	importOvfReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	CloneVMStub        func(string, string) (string, error)
	cloneVMMutex       sync.RWMutex
	cloneVMArgsForCall []struct {
		arg1 string
		arg2 string
	}
	cloneVMReturns struct {
		result1 string
		result2 error
	}
	cloneVMReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGovcClient) ImportOvf(arg1 string, arg2 string) (string, error) {
	fake.importOvfMutex.Lock()
	ret, specificReturn := fake.importOvfReturnsOnCall[len(fake.importOvfArgsForCall)]
	fake.importOvfArgsForCall = append(fake.importOvfArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ImportOvf", []interface{}{arg1, arg2})
	fake.importOvfMutex.Unlock()
	if fake.ImportOvfStub != nil {
		return fake.ImportOvfStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.importOvfReturns.result1, fake.importOvfReturns.result2
}

func (fake *FakeGovcClient) ImportOvfCallCount() int {
	fake.importOvfMutex.RLock()
	defer fake.importOvfMutex.RUnlock()
	return len(fake.importOvfArgsForCall)
}

func (fake *FakeGovcClient) ImportOvfArgsForCall(i int) (string, string) {
	fake.importOvfMutex.RLock()
	defer fake.importOvfMutex.RUnlock()
	return fake.importOvfArgsForCall[i].arg1, fake.importOvfArgsForCall[i].arg2
}

func (fake *FakeGovcClient) ImportOvfReturns(result1 string, result2 error) {
	fake.ImportOvfStub = nil
	fake.importOvfReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGovcClient) ImportOvfReturnsOnCall(i int, result1 string, result2 error) {
	fake.ImportOvfStub = nil
	if fake.importOvfReturnsOnCall == nil {
		fake.importOvfReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.importOvfReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGovcClient) CloneVM(arg1 string, arg2 string) (string, error) {
	fake.cloneVMMutex.Lock()
	ret, specificReturn := fake.cloneVMReturnsOnCall[len(fake.cloneVMArgsForCall)]
	fake.cloneVMArgsForCall = append(fake.cloneVMArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CloneVM", []interface{}{arg1, arg2})
	fake.cloneVMMutex.Unlock()
	if fake.CloneVMStub != nil {
		return fake.CloneVMStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.cloneVMReturns.result1, fake.cloneVMReturns.result2
}

func (fake *FakeGovcClient) CloneVMCallCount() int {
	fake.cloneVMMutex.RLock()
	defer fake.cloneVMMutex.RUnlock()
	return len(fake.cloneVMArgsForCall)
}

func (fake *FakeGovcClient) CloneVMArgsForCall(i int) (string, string) {
	fake.cloneVMMutex.RLock()
	defer fake.cloneVMMutex.RUnlock()
	return fake.cloneVMArgsForCall[i].arg1, fake.cloneVMArgsForCall[i].arg2
}

func (fake *FakeGovcClient) CloneVMReturns(result1 string, result2 error) {
	fake.CloneVMStub = nil
	fake.cloneVMReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGovcClient) CloneVMReturnsOnCall(i int, result1 string, result2 error) {
	fake.CloneVMStub = nil
	if fake.cloneVMReturnsOnCall == nil {
		fake.cloneVMReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.cloneVMReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGovcClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.importOvfMutex.RLock()
	defer fake.importOvfMutex.RUnlock()
	fake.cloneVMMutex.RLock()
	defer fake.cloneVMMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGovcClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ govc.GovcClient = new(FakeGovcClient)
