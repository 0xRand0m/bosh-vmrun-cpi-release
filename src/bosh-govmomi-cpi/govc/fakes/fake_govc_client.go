// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"bosh-govmomi-cpi/govc"
	"sync"
)

type FakeGovcClient struct {
	ImportOvfStub        func(string) (bool, error)
	importOvfMutex       sync.RWMutex
	importOvfArgsForCall []struct {
		arg1 string
	}
	importOvfReturns struct {
		result1 bool
		result2 error
	}
	importOvfReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGovcClient) ImportOvf(arg1 string) (bool, error) {
	fake.importOvfMutex.Lock()
	ret, specificReturn := fake.importOvfReturnsOnCall[len(fake.importOvfArgsForCall)]
	fake.importOvfArgsForCall = append(fake.importOvfArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ImportOvf", []interface{}{arg1})
	fake.importOvfMutex.Unlock()
	if fake.ImportOvfStub != nil {
		return fake.ImportOvfStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.importOvfReturns.result1, fake.importOvfReturns.result2
}

func (fake *FakeGovcClient) ImportOvfCallCount() int {
	fake.importOvfMutex.RLock()
	defer fake.importOvfMutex.RUnlock()
	return len(fake.importOvfArgsForCall)
}

func (fake *FakeGovcClient) ImportOvfArgsForCall(i int) string {
	fake.importOvfMutex.RLock()
	defer fake.importOvfMutex.RUnlock()
	return fake.importOvfArgsForCall[i].arg1
}

func (fake *FakeGovcClient) ImportOvfReturns(result1 bool, result2 error) {
	fake.ImportOvfStub = nil
	fake.importOvfReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeGovcClient) ImportOvfReturnsOnCall(i int, result1 bool, result2 error) {
	fake.ImportOvfStub = nil
	if fake.importOvfReturnsOnCall == nil {
		fake.importOvfReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.importOvfReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeGovcClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.importOvfMutex.RLock()
	defer fake.importOvfMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGovcClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ govc.GovcClient = new(FakeGovcClient)
