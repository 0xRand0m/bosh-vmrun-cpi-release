// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"bosh-govmomi-cpi/vm"
	"sync"

	"github.com/cppforlife/bosh-cpi-go/apiv1"
)

type FakeAgentSettings struct {
	CleanupStub                    func()
	cleanupMutex                   sync.RWMutex
	cleanupArgsForCall             []struct{}
	GenerateAgentEnvIsoStub        func(apiv1.AgentEnv) (string, error)
	generateAgentEnvIsoMutex       sync.RWMutex
	generateAgentEnvIsoArgsForCall []struct {
		arg1 apiv1.AgentEnv
	}
	generateAgentEnvIsoReturns struct {
		result1 string
		result2 error
	}
	generateAgentEnvIsoReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAgentSettings) Cleanup() {
	fake.cleanupMutex.Lock()
	fake.cleanupArgsForCall = append(fake.cleanupArgsForCall, struct{}{})
	fake.recordInvocation("Cleanup", []interface{}{})
	fake.cleanupMutex.Unlock()
	if fake.CleanupStub != nil {
		fake.CleanupStub()
	}
}

func (fake *FakeAgentSettings) CleanupCallCount() int {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return len(fake.cleanupArgsForCall)
}

func (fake *FakeAgentSettings) GenerateAgentEnvIso(arg1 apiv1.AgentEnv) (string, error) {
	fake.generateAgentEnvIsoMutex.Lock()
	ret, specificReturn := fake.generateAgentEnvIsoReturnsOnCall[len(fake.generateAgentEnvIsoArgsForCall)]
	fake.generateAgentEnvIsoArgsForCall = append(fake.generateAgentEnvIsoArgsForCall, struct {
		arg1 apiv1.AgentEnv
	}{arg1})
	fake.recordInvocation("GenerateAgentEnvIso", []interface{}{arg1})
	fake.generateAgentEnvIsoMutex.Unlock()
	if fake.GenerateAgentEnvIsoStub != nil {
		return fake.GenerateAgentEnvIsoStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateAgentEnvIsoReturns.result1, fake.generateAgentEnvIsoReturns.result2
}

func (fake *FakeAgentSettings) GenerateAgentEnvIsoCallCount() int {
	fake.generateAgentEnvIsoMutex.RLock()
	defer fake.generateAgentEnvIsoMutex.RUnlock()
	return len(fake.generateAgentEnvIsoArgsForCall)
}

func (fake *FakeAgentSettings) GenerateAgentEnvIsoArgsForCall(i int) apiv1.AgentEnv {
	fake.generateAgentEnvIsoMutex.RLock()
	defer fake.generateAgentEnvIsoMutex.RUnlock()
	return fake.generateAgentEnvIsoArgsForCall[i].arg1
}

func (fake *FakeAgentSettings) GenerateAgentEnvIsoReturns(result1 string, result2 error) {
	fake.GenerateAgentEnvIsoStub = nil
	fake.generateAgentEnvIsoReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentSettings) GenerateAgentEnvIsoReturnsOnCall(i int, result1 string, result2 error) {
	fake.GenerateAgentEnvIsoStub = nil
	if fake.generateAgentEnvIsoReturnsOnCall == nil {
		fake.generateAgentEnvIsoReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateAgentEnvIsoReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAgentSettings) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	fake.generateAgentEnvIsoMutex.RLock()
	defer fake.generateAgentEnvIsoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAgentSettings) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vm.AgentSettings = new(FakeAgentSettings)
