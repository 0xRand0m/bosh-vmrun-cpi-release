package driver

import (
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"text/template"

	boshlog "github.com/cloudfoundry/bosh-utils/logger"
	boshsys "github.com/cloudfoundry/bosh-utils/system"
)

type ovftoolRunnerImpl struct {
	ovftoolBinPath string
	boshRunner     boshsys.CmdRunner
	logger         boshlog.Logger
}

func NewOvftoolRunner(ovftoolBinPath string, boshRunner boshsys.CmdRunner, logger boshlog.Logger) *ovftoolRunnerImpl {
	logger.Debug("ovftool-runner", "bin: %+s", ovftoolBinPath)

	return &ovftoolRunnerImpl{ovftoolBinPath: ovftoolBinPath, boshRunner: boshRunner, logger: logger}
}

func (r *ovftoolRunnerImpl) Configure() error {
	_, err := r.cliCommand([]string{"-v"}, nil)
	if err != nil {
		return err
	}
	return nil
}

func (r *ovftoolRunnerImpl) ImportOvf(ovfPath, vmxPath, vmName string) error {
	var err error
	flags := map[string]string{
		"sourceType":          "OVF",
		"allowAllExtraConfig": "true",
		"allowExtraConfig":    "true",
		"targetType":          "VMX",
		"name":                vmName,
	}

	os.MkdirAll(filepath.Dir(vmxPath), 0700)

	args := []string{ovfPath, vmxPath}

	_, err = r.cliCommand(args, flags)
	if err != nil {
		r.logger.ErrorWithDetails("ovftool runner", "import ovf", err)
		return err
	}

	return nil
}

func (r *ovftoolRunnerImpl) Clone(sourceVmxPath, targetVmxPath, targetVmName string) error {
	var err error
	flags := map[string]string{
		"sourceType":          "VMX",
		"allowAllExtraConfig": "true",
		"allowExtraConfig":    "true",
		"targetType":          "VMX",
		"name":                targetVmName,
	}

	os.MkdirAll(filepath.Dir(targetVmxPath), 0700)

	args := []string{sourceVmxPath, targetVmxPath}

	_, err = r.cliCommand(args, flags)
	if err != nil {
		r.logger.ErrorWithDetails("ovftool runner", "clone", err)
		return err
	}

	return nil
}

func (r *ovftoolRunnerImpl) CreateDisk(diskPath string, diskMB int) error {
	var err error
	var outputDirPath string
	var inputOvfPath string
	var generatedVmxPath string
	var generatedDiskPath string
	var generatedDiskFile *os.File
	var outputDiskFile *os.File

	outputDirPath, err = ioutil.TempDir("", "ovf-disk-generate")
	if err != nil {
		return err
	}
	defer os.RemoveAll(outputDirPath)

	inputOvfPath = filepath.Join(outputDirPath, "makedisk.ovf")
	generatedVmxPath = filepath.Join(outputDirPath, "makedisk.vmx")
	generatedDiskPath = filepath.Join(outputDirPath, "makedisk-disk1.vmdk")

	var inputOvfContent bytes.Buffer
	err = tmpl.Execute(&inputOvfContent, struct{ SizeMB int }{diskMB})
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(inputOvfPath, inputOvfContent.Bytes(), 0777)
	if err != nil {
		return err
	}

	flags := map[string]string{
		"sourceType": "OVF",
		"targetType": "VMX",
		"name":       "makedisk",
	}

	args := []string{inputOvfPath, generatedVmxPath}

	_, err = r.cliCommand(args, flags)
	if err != nil {
		r.logger.ErrorWithDetails("ovftool runner", "create disk", err)
		return err
	}

	generatedDiskFile, err = os.Open(generatedDiskPath)
	if err != nil {
		return err
	}

	outputDiskFile, err = os.Create(diskPath)
	if err != nil {
		return err
	}

	_, err = io.Copy(outputDiskFile, generatedDiskFile)
	if err != nil {
		return err
	}

	return nil
}

func (r *ovftoolRunnerImpl) cliCommand(args []string, flagMap map[string]string) (string, error) {
	commandArgs := []string{}
	for option, value := range flagMap {
		commandArgs = append(commandArgs, fmt.Sprintf("--%s=%s", option, value))
	}
	commandArgs = append(commandArgs, args...)

	stdout, _, _, err := r.boshRunner.RunCommand(r.ovftoolBinPath, commandArgs...)

	return stdout, err
}

var tmpl = template.Must(template.New("tmpl").Parse(`<?xml version="1.0" encoding="UTF-8"?>
<!--Generated by VMware VirtualCenter Server, User: root, UTC time: 2013-11-29T02:27:26.13852Z-->
<Envelope vmw:buildId="build-1312298" xmlns="http://schemas.dmtf.org/ovf/envelope/1" xmlns:cim="http://schemas.dmtf.org/wbem/wscim/1/common" xmlns:ovf="http://schemas.dmtf.org/ovf/envelope/1" xmlns:rasd="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData" xmlns:vmw="http://www.vmware.com/schema/ovf" xmlns:vssd="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <References>
  </References>
  <DiskSection>
    <Info>Virtual disk information</Info>
    <Disk ovf:capacity="${generatedDiskSizeMB}" ovf:capacityAllocationUnits="byte * 2^20" ovf:diskId="vmdisk1" ovf:format="http://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized" ovf:populatedSize="0"/>
  </DiskSection>
  <NetworkSection>
    <Info>The list of logical networks</Info>
    <Network ovf:name="VM Network">
      <Description>The VM Network network</Description>
    </Network>
  </NetworkSection>
  <VirtualSystem ovf:id="vsan-esxi-1">
    <Info>A virtual machine</Info>
    <Name>vsan-esxi-1</Name><ovf:AnnotationSection><ovf:Info>An human-readable annotation</ovf:Info><ovf:Annotation>Nested ESXi VM template for testing VMware VSAN
www.virtuallyghetto.com</ovf:Annotation></ovf:AnnotationSection>
    <OperatingSystemSection ovf:id="104" ovf:version="5" vmw:osType="vmkernel5Guest">
      <Info>The kind of installed guest operating system</Info>
      <Description>VMware ESXi 5.x</Description>
    </OperatingSystemSection>
    <VirtualHardwareSection>
      <Info>Virtual hardware requirements</Info>
      <System>
        <vssd:ElementName>Virtual Hardware Family</vssd:ElementName>
        <vssd:InstanceID>0</vssd:InstanceID>
        <vssd:VirtualSystemIdentifier>vsan-esxi-1</vssd:VirtualSystemIdentifier>
        <vssd:VirtualSystemType>vmx-09</vssd:VirtualSystemType>
      </System>
      <Item>
        <rasd:AllocationUnits>hertz * 10^6</rasd:AllocationUnits>
        <rasd:Description>Number of Virtual CPUs</rasd:Description>
        <rasd:ElementName>2 virtual CPU(s)</rasd:ElementName>
        <rasd:InstanceID>1</rasd:InstanceID>
        <rasd:ResourceType>3</rasd:ResourceType>
        <rasd:VirtualQuantity>2</rasd:VirtualQuantity>
      </Item>
      <Item>
        <rasd:AllocationUnits>byte * 2^20</rasd:AllocationUnits>
        <rasd:Description>Memory Size</rasd:Description>
        <rasd:ElementName>5120MB of memory</rasd:ElementName>
        <rasd:InstanceID>2</rasd:InstanceID>
        <rasd:ResourceType>4</rasd:ResourceType>
        <rasd:VirtualQuantity>5120</rasd:VirtualQuantity>
      </Item>
      <Item>
        <rasd:Address>0</rasd:Address>
        <rasd:Description>SCSI Controller</rasd:Description>
        <rasd:ElementName>SCSI controller 0</rasd:ElementName>
        <rasd:InstanceID>3</rasd:InstanceID>
        <rasd:ResourceSubType>lsilogic</rasd:ResourceSubType>
        <rasd:ResourceType>6</rasd:ResourceType>
      </Item>
      <Item>
        <rasd:Address>1</rasd:Address>
        <rasd:Description>IDE Controller</rasd:Description>
        <rasd:ElementName>IDE 1</rasd:ElementName>
        <rasd:InstanceID>4</rasd:InstanceID>
        <rasd:ResourceType>5</rasd:ResourceType>
      </Item>
      <Item>
        <rasd:Address>0</rasd:Address>
        <rasd:Description>IDE Controller</rasd:Description>
        <rasd:ElementName>IDE 0</rasd:ElementName>
        <rasd:InstanceID>5</rasd:InstanceID>
        <rasd:ResourceType>5</rasd:ResourceType>
      </Item>
      <Item ovf:required="false">
        <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>
        <rasd:ElementName>Video card</rasd:ElementName>
        <rasd:InstanceID>6</rasd:InstanceID>
        <rasd:ResourceType>24</rasd:ResourceType>
        <vmw:Config ovf:required="false" vmw:key="enable3DSupport" vmw:value="false"/>
        <vmw:Config ovf:required="false" vmw:key="use3dRenderer" vmw:value="automatic"/>
        <vmw:Config ovf:required="false" vmw:key="useAutoDetect" vmw:value="false"/>
        <vmw:Config ovf:required="false" vmw:key="videoRamSizeInKB" vmw:value="4096"/>
      </Item>
      <Item ovf:required="false">
        <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>
        <rasd:ElementName>VMCI device</rasd:ElementName>
        <rasd:InstanceID>7</rasd:InstanceID>
        <rasd:ResourceSubType>vmware.vmci</rasd:ResourceSubType>
        <rasd:ResourceType>1</rasd:ResourceType>
        <vmw:Config ovf:required="false" vmw:key="allowUnrestrictedCommunication" vmw:value="false"/>
      </Item>
      <Item ovf:required="false">
        <rasd:AddressOnParent>0</rasd:AddressOnParent>
        <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>
        <rasd:ElementName>CD/DVD drive 1</rasd:ElementName>
        <rasd:InstanceID>8</rasd:InstanceID>
        <rasd:Parent>4</rasd:Parent>
        <rasd:ResourceSubType>vmware.cdrom.remotepassthrough</rasd:ResourceSubType>
        <rasd:ResourceType>15</rasd:ResourceType>
        <vmw:Config ovf:required="false" vmw:key="backing.exclusive" vmw:value="false"/>
      </Item>
      <Item>
        <rasd:AddressOnParent>0</rasd:AddressOnParent>
        <rasd:ElementName>Hard disk 1</rasd:ElementName>
        <rasd:HostResource>ovf:/disk/vmdisk1</rasd:HostResource>
        <rasd:InstanceID>9</rasd:InstanceID>
        <rasd:Parent>3</rasd:Parent>
        <rasd:ResourceType>17</rasd:ResourceType>
        <vmw:Config ovf:required="false" vmw:key="backing.writeThrough" vmw:value="false"/>
      </Item>
      <Item ovf:required="false">
        <rasd:AddressOnParent>0</rasd:AddressOnParent>
        <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>
        <rasd:Description>Floppy Drive</rasd:Description>
        <rasd:ElementName>Floppy drive 1</rasd:ElementName>
        <rasd:InstanceID>12</rasd:InstanceID>
        <rasd:ResourceSubType>vmware.floppy.remotedevice</rasd:ResourceSubType>
        <rasd:ResourceType>14</rasd:ResourceType>
      </Item>
      <Item>
        <rasd:AddressOnParent>7</rasd:AddressOnParent>
        <rasd:AutomaticAllocation>true</rasd:AutomaticAllocation>
        <rasd:Connection>VM Network</rasd:Connection>
        <rasd:Description>E1000 ethernet adapter on &quot;VM Network&quot;</rasd:Description>
        <rasd:ElementName>Network adapter 1</rasd:ElementName>
        <rasd:InstanceID>13</rasd:InstanceID>
        <rasd:ResourceSubType>E1000</rasd:ResourceSubType>
        <rasd:ResourceType>10</rasd:ResourceType>
        <vmw:Config ovf:required="false" vmw:key="wakeOnLanEnabled" vmw:value="true"/>
      </Item>
      <vmw:Config ovf:required="false" vmw:key="cpuHotAddEnabled" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="cpuHotRemoveEnabled" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="firmware" vmw:value="bios"/>
      <vmw:Config ovf:required="false" vmw:key="virtualICH7MPresent" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="virtualSMCPresent" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="memoryHotAddEnabled" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="nestedHVEnabled" vmw:value="true"/>
      <vmw:Config ovf:required="false" vmw:key="powerOpInfo.powerOffType" vmw:value="soft"/>
      <vmw:Config ovf:required="false" vmw:key="powerOpInfo.resetType" vmw:value="soft"/>
      <vmw:Config ovf:required="false" vmw:key="powerOpInfo.standbyAction" vmw:value="powerOnSuspend"/>
      <vmw:Config ovf:required="false" vmw:key="powerOpInfo.suspendType" vmw:value="hard"/>
      <vmw:Config ovf:required="false" vmw:key="tools.afterPowerOn" vmw:value="true"/>
      <vmw:Config ovf:required="false" vmw:key="tools.afterResume" vmw:value="true"/>
      <vmw:Config ovf:required="false" vmw:key="tools.beforeGuestShutdown" vmw:value="true"/>
      <vmw:Config ovf:required="false" vmw:key="tools.beforeGuestStandby" vmw:value="true"/>
      <vmw:Config ovf:required="false" vmw:key="tools.syncTimeWithHost" vmw:value="false"/>
      <vmw:Config ovf:required="false" vmw:key="tools.toolsUpgradePolicy" vmw:value="manual"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="svga.present" vmw:value="TRUE"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="vmci.filter.enable" vmw:value="true"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="hpet0.present" vmw:value="true"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="virtualHW.productCompatibility" vmw:value="hosted"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="featMask.vm.hv.capable" vmw:value="Min:1"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="pciBridge0.present" vmw:value="true"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="sched.scsi0:0.throughputCap" vmw:value="off"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="sched.scsi0:1.throughputCap" vmw:value="off"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="sched.scsi0:2.throughputCap" vmw:value="off"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="pciBridge4.present" vmw:value="true"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="snapshot.action" vmw:value="keep"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="pciBridge4.virtualDev" vmw:value="pcieRootPort"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="pciBridge4.functions" vmw:value="8"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="pciBridge5.present" vmw:value="true"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="pciBridge5.virtualDev" vmw:value="pcieRootPort"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="pciBridge5.functions" vmw:value="8"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="pciBridge6.present" vmw:value="true"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="pciBridge6.virtualDev" vmw:value="pcieRootPort"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="pciBridge6.functions" vmw:value="8"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="pciBridge7.present" vmw:value="true"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="pciBridge7.virtualDev" vmw:value="pcieRootPort"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="pciBridge7.functions" vmw:value="8"/>
	    <vmw:ExtraConfig ovf:required="false" vmw:key="scsi0:0.virtualSSD" vmw:value="0"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="scsi0:1.virtualSSD" vmw:value="1"/>
	    <vmw:ExtraConfig ovf:required="false" vmw:key="scsi0:2.virtualSSD" vmw:value="0"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="vmware.tools.internalversion" vmw:value="0"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="vmware.tools.requiredversion" vmw:value="9344"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="ethernet0.filter4.name" vmw:value="dvfilter-maclearn"/>
      <vmw:ExtraConfig ovf:required="false" vmw:key="ethernet0.filter4.onFailure" vmw:value="failOpen"/>      
    </VirtualHardwareSection>
	<ProductSection>
      <Info>Information about the installed software</Info>
      <Product>VSAN Nested ESXi VM</Product>
      <Vendor>virtuallyGhetto</Vendor>
      <Version>1.0</Version>
      <Property ovf:key="generatedDiskSizeMB"
		ovf:runtimeConfigurable="false"	
		ovf:type="int" 
		ovf:qualifiers="MinValue(1) MaxValue(10000000)"
		ovf:value="{{.SizeMB}}"
		ovf:userConfigurable="true">
        <Label>Generated Disk Size</Label>
        <Description>The size of the disk in gigabytes.</Description>
      </Property>
    </ProductSection>    
  </VirtualSystem>
</Envelope>
`))
