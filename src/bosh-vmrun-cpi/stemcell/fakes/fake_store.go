// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"bosh-vmrun-cpi/stemcell"
	"sync"
)

type FakeStemcellStore struct {
	CleanupStub        func()
	cleanupMutex       sync.RWMutex
	cleanupArgsForCall []struct {
	}
	GetByImagePathMappingStub        func(string) (string, error)
	getByImagePathMappingMutex       sync.RWMutex
	getByImagePathMappingArgsForCall []struct {
		arg1 string
	}
	getByImagePathMappingReturns struct {
		result1 string
		result2 error
	}
	getByImagePathMappingReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetByMetadataStub        func(string, string) (string, error)
	getByMetadataMutex       sync.RWMutex
	getByMetadataArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getByMetadataReturns struct {
		result1 string
		result2 error
	}
	getByMetadataReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStemcellStore) Cleanup() {
	fake.cleanupMutex.Lock()
	fake.cleanupArgsForCall = append(fake.cleanupArgsForCall, struct {
	}{})
	fake.recordInvocation("Cleanup", []interface{}{})
	fake.cleanupMutex.Unlock()
	if fake.CleanupStub != nil {
		fake.CleanupStub()
	}
}

func (fake *FakeStemcellStore) CleanupCallCount() int {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return len(fake.cleanupArgsForCall)
}

func (fake *FakeStemcellStore) CleanupCalls(stub func()) {
	fake.cleanupMutex.Lock()
	defer fake.cleanupMutex.Unlock()
	fake.CleanupStub = stub
}

func (fake *FakeStemcellStore) GetByImagePathMapping(arg1 string) (string, error) {
	fake.getByImagePathMappingMutex.Lock()
	ret, specificReturn := fake.getByImagePathMappingReturnsOnCall[len(fake.getByImagePathMappingArgsForCall)]
	fake.getByImagePathMappingArgsForCall = append(fake.getByImagePathMappingArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetByImagePathMapping", []interface{}{arg1})
	fake.getByImagePathMappingMutex.Unlock()
	if fake.GetByImagePathMappingStub != nil {
		return fake.GetByImagePathMappingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getByImagePathMappingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStemcellStore) GetByImagePathMappingCallCount() int {
	fake.getByImagePathMappingMutex.RLock()
	defer fake.getByImagePathMappingMutex.RUnlock()
	return len(fake.getByImagePathMappingArgsForCall)
}

func (fake *FakeStemcellStore) GetByImagePathMappingCalls(stub func(string) (string, error)) {
	fake.getByImagePathMappingMutex.Lock()
	defer fake.getByImagePathMappingMutex.Unlock()
	fake.GetByImagePathMappingStub = stub
}

func (fake *FakeStemcellStore) GetByImagePathMappingArgsForCall(i int) string {
	fake.getByImagePathMappingMutex.RLock()
	defer fake.getByImagePathMappingMutex.RUnlock()
	argsForCall := fake.getByImagePathMappingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStemcellStore) GetByImagePathMappingReturns(result1 string, result2 error) {
	fake.getByImagePathMappingMutex.Lock()
	defer fake.getByImagePathMappingMutex.Unlock()
	fake.GetByImagePathMappingStub = nil
	fake.getByImagePathMappingReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStemcellStore) GetByImagePathMappingReturnsOnCall(i int, result1 string, result2 error) {
	fake.getByImagePathMappingMutex.Lock()
	defer fake.getByImagePathMappingMutex.Unlock()
	fake.GetByImagePathMappingStub = nil
	if fake.getByImagePathMappingReturnsOnCall == nil {
		fake.getByImagePathMappingReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getByImagePathMappingReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStemcellStore) GetByMetadata(arg1 string, arg2 string) (string, error) {
	fake.getByMetadataMutex.Lock()
	ret, specificReturn := fake.getByMetadataReturnsOnCall[len(fake.getByMetadataArgsForCall)]
	fake.getByMetadataArgsForCall = append(fake.getByMetadataArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetByMetadata", []interface{}{arg1, arg2})
	fake.getByMetadataMutex.Unlock()
	if fake.GetByMetadataStub != nil {
		return fake.GetByMetadataStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getByMetadataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStemcellStore) GetByMetadataCallCount() int {
	fake.getByMetadataMutex.RLock()
	defer fake.getByMetadataMutex.RUnlock()
	return len(fake.getByMetadataArgsForCall)
}

func (fake *FakeStemcellStore) GetByMetadataCalls(stub func(string, string) (string, error)) {
	fake.getByMetadataMutex.Lock()
	defer fake.getByMetadataMutex.Unlock()
	fake.GetByMetadataStub = stub
}

func (fake *FakeStemcellStore) GetByMetadataArgsForCall(i int) (string, string) {
	fake.getByMetadataMutex.RLock()
	defer fake.getByMetadataMutex.RUnlock()
	argsForCall := fake.getByMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStemcellStore) GetByMetadataReturns(result1 string, result2 error) {
	fake.getByMetadataMutex.Lock()
	defer fake.getByMetadataMutex.Unlock()
	fake.GetByMetadataStub = nil
	fake.getByMetadataReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStemcellStore) GetByMetadataReturnsOnCall(i int, result1 string, result2 error) {
	fake.getByMetadataMutex.Lock()
	defer fake.getByMetadataMutex.Unlock()
	fake.GetByMetadataStub = nil
	if fake.getByMetadataReturnsOnCall == nil {
		fake.getByMetadataReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getByMetadataReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStemcellStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	fake.getByImagePathMappingMutex.RLock()
	defer fake.getByImagePathMappingMutex.RUnlock()
	fake.getByMetadataMutex.RLock()
	defer fake.getByMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStemcellStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stemcell.StemcellStore = new(FakeStemcellStore)
