// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"bosh-vmrun-cpi/stemcell"
	"sync"
)

type FakeStemcellStore struct {
	CleanupStub        func()
	cleanupMutex       sync.RWMutex
	cleanupArgsForCall []struct {
	}
	GetImagePathStub        func(string, string) (string, error)
	getImagePathMutex       sync.RWMutex
	getImagePathArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getImagePathReturns struct {
		result1 string
		result2 error
	}
	getImagePathReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStemcellStore) Cleanup() {
	fake.cleanupMutex.Lock()
	fake.cleanupArgsForCall = append(fake.cleanupArgsForCall, struct {
	}{})
	fake.recordInvocation("Cleanup", []interface{}{})
	fake.cleanupMutex.Unlock()
	if fake.CleanupStub != nil {
		fake.CleanupStub()
	}
}

func (fake *FakeStemcellStore) CleanupCallCount() int {
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	return len(fake.cleanupArgsForCall)
}

func (fake *FakeStemcellStore) CleanupCalls(stub func()) {
	fake.cleanupMutex.Lock()
	defer fake.cleanupMutex.Unlock()
	fake.CleanupStub = stub
}

func (fake *FakeStemcellStore) GetImagePath(arg1 string, arg2 string) (string, error) {
	fake.getImagePathMutex.Lock()
	ret, specificReturn := fake.getImagePathReturnsOnCall[len(fake.getImagePathArgsForCall)]
	fake.getImagePathArgsForCall = append(fake.getImagePathArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetImagePath", []interface{}{arg1, arg2})
	fake.getImagePathMutex.Unlock()
	if fake.GetImagePathStub != nil {
		return fake.GetImagePathStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getImagePathReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStemcellStore) GetImagePathCallCount() int {
	fake.getImagePathMutex.RLock()
	defer fake.getImagePathMutex.RUnlock()
	return len(fake.getImagePathArgsForCall)
}

func (fake *FakeStemcellStore) GetImagePathCalls(stub func(string, string) (string, error)) {
	fake.getImagePathMutex.Lock()
	defer fake.getImagePathMutex.Unlock()
	fake.GetImagePathStub = stub
}

func (fake *FakeStemcellStore) GetImagePathArgsForCall(i int) (string, string) {
	fake.getImagePathMutex.RLock()
	defer fake.getImagePathMutex.RUnlock()
	argsForCall := fake.getImagePathArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStemcellStore) GetImagePathReturns(result1 string, result2 error) {
	fake.getImagePathMutex.Lock()
	defer fake.getImagePathMutex.Unlock()
	fake.GetImagePathStub = nil
	fake.getImagePathReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStemcellStore) GetImagePathReturnsOnCall(i int, result1 string, result2 error) {
	fake.getImagePathMutex.Lock()
	defer fake.getImagePathMutex.Unlock()
	fake.GetImagePathStub = nil
	if fake.getImagePathReturnsOnCall == nil {
		fake.getImagePathReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getImagePathReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStemcellStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanupMutex.RLock()
	defer fake.cleanupMutex.RUnlock()
	fake.getImagePathMutex.RLock()
	defer fake.getImagePathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStemcellStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stemcell.StemcellStore = new(FakeStemcellStore)
