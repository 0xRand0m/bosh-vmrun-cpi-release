// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"bosh-vmrun-cpi/stemcell"
	"sync"
)

type FakeConfig struct {
	StemcellStorePathStub        func() string
	stemcellStorePathMutex       sync.RWMutex
	stemcellStorePathArgsForCall []struct{}
	stemcellStorePathReturns     struct {
		result1 string
	}
	stemcellStorePathReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfig) StemcellStorePath() string {
	fake.stemcellStorePathMutex.Lock()
	ret, specificReturn := fake.stemcellStorePathReturnsOnCall[len(fake.stemcellStorePathArgsForCall)]
	fake.stemcellStorePathArgsForCall = append(fake.stemcellStorePathArgsForCall, struct{}{})
	fake.recordInvocation("StemcellStorePath", []interface{}{})
	fake.stemcellStorePathMutex.Unlock()
	if fake.StemcellStorePathStub != nil {
		return fake.StemcellStorePathStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.stemcellStorePathReturns.result1
}

func (fake *FakeConfig) StemcellStorePathCallCount() int {
	fake.stemcellStorePathMutex.RLock()
	defer fake.stemcellStorePathMutex.RUnlock()
	return len(fake.stemcellStorePathArgsForCall)
}

func (fake *FakeConfig) StemcellStorePathReturns(result1 string) {
	fake.StemcellStorePathStub = nil
	fake.stemcellStorePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) StemcellStorePathReturnsOnCall(i int, result1 string) {
	fake.StemcellStorePathStub = nil
	if fake.stemcellStorePathReturnsOnCall == nil {
		fake.stemcellStorePathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.stemcellStorePathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stemcellStorePathMutex.RLock()
	defer fake.stemcellStorePathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ stemcell.Config = new(FakeConfig)
